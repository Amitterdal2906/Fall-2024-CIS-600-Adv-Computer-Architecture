library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
USE IEEE.numeric_std.all;  

entity Instruction_Memory is
port (
 pc: in std_logic_vector(31 downto 0);
 instruction: out  std_logic_vector(31 downto 0)
);
end Instruction_Memory;

architecture Behavioral of Instruction_Memory is
signal rom_addr: std_logic_vector(3 downto 0);

 type ROM_type is array (0 to 15 ) of std_logic_vector(31 downto 0);
 constant rom_data: ROM_type:=(
   "00000000011000100000000000100000", --000000 00011 00010 00000 00000 100000 [add r3,r2,r0]
   "00000000011000100000000000100010", --000000 00011 00010 00000 00000 100010 [sub r3,r2,r0]
   "00000000011000100000000000100100", --000000 00011 00010 00000 00000 100100 [and r3,r2,r0]
   "00000000011000100000000000100101", --000000 00011 00010 00000 00000 100101 [or r3,r2,r0]
   "00000000011000100000000000100110", --000000 00011 00010 00000 00000 100110 [xor r3,r2,r0]
   "00000000011000100000000000100111", --000000 00011 00010 00000 00000 100111 [nor r3,r2,r0]
   "00000000011000100000000000100010", --000000 00011 00010 00000 00000 100100 [and r3,r2,r0]
   "0000000000000000",
   "0000000000000000",
   "0000000000000000",
   "0000000000000000",
   "0000000000000000",
   "0000000000000000",
   "0000000000000000",
   "0000000000000000",
   "0000000000000000"
  );
begin

 rom_addr <= pc(4 downto 1);
  instruction <= rom_data(to_integer(unsigned(rom_addr))) when pc < x"00000020" else x"00000000";

end Behavioral;